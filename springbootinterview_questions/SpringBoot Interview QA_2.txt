What is Spring Boot Actuator ?
Actuator is a manufacturing term that refers to mechanical device for moving and controlling something  .Actuators can generate a large amount of motion from a small change 

In SB, Actuator is an additional feature that help you monitor and manage your application when you push it to production . These features includes auditing, health and metrics gathering and many more features that can be automatically applied t your application 
You can enable thos feature by adding spring-boot-starter-actuator in pom.xml 
Using Spring actuator , you can access those flows like what bean is created , what is the CPU usage, http hits that your server has handled 

Add dependency and hits the URL's if dependency is not added it will throw error 
 http://localhost:9080/actuator/health 
{"status":"UP"} 
		
http://localhost:9080/actuator 
{"_links":{"self":{"href":"http://localhost:9080/actuator","templated":false},"health":{"href":"http://localhost:9080/actuator/health","templated":false},"health-path":{"href":"http://localhost:9080/actuator/health/{*path}","templated":true}}}

Actuator Endpoints :
By Default endpoints can be seen it  
http://localhost:9080/actuator 

To explicitly include/expose all endpoints use this  in properties file 
management.endpoints.web.exposure.include=*

To expose only selected enpoints 
management.endpoints.web.exposure.include=health,env,beans,info
http://localhost:9080/actuator/beans this will throw error as beans is not included 


To get environmental configuration about the server 
http://localhost:9080/actuator/env
If dev profile is active 
{"activeProfiles":["dev"],"propertySources":[{"name":"server.ports","properties":{"local.server.port":{"value":8081}}}

To get all spring beans loaded in the context 
http://localhost:9080/actuator/beans


How to change the Actuator endpoints ?
By default all endpoints comes in default context path of the application, suffixed with /actuator . If for some reason , we have existing endpoiints in application starting with /actuator then we can customize the base path to something else 

management.endpoints.web.base-path = /manage

Now we will be able to access all actuator endpoints under a new URL 
 http://localhost:9080/manage/health 
 
 
Customize the management server port ?
http://localhost:7080/actuator/health  ---> actuator endpoints will work in this port application will run in other porrts 

management.server.port=7080


How to deploy SB web application as JAR  or WAR file ?
To deploy a SB web application , you have to add the maven plugin in pom.xml file 
	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>
	
By using the above plugin you will get JAR executing the package phase . This JAR will contain an embedded server . So you can basically run the application like an ordinary JAR file 

Not : The packaging element in the pom.xml must be set to jar to build a JAR file as below :
<packaging>jar</packaging>
		or
<packaging>war</packaging>

------------------
Maven Build Lifecycle 
The Maven build follows a specific life cycle to deploy and distribute the target project.

There are three built-in life cycles:

default: the main life cycle as it's responsible for project deployment
clean: to clean the project and remove all files generated by the previous build
site: to create the project's site documentation
Each life cycle consists of a sequence of phases. The default build life cycle consists of 23 phases as it's the main build lifecycle.

On the other hand, clean life cycle consists of 3 phases, while the site lifecycle is made up of 4 phases.

------------------

Maven Phase
A Maven phase represents a stage in the Maven build lifecycle. Each phase is responsible for a specific task.

Here are some of the most important phases in the default build lifecycle:

validate: check if all information necessary for the build is available
compile: compile the source code
test-compile: compile the test source code
test: run unit tests
package: package compiled source code into the distributable format (jar, war, â€¦)
integration-test: process and deploy the package if needed to run integration tests
install: install the package to a local repository
deploy: copy the package to the remote repository



YAML files :
YAML files follows hierachy 

spring:
    profiles:
        active: dev
		
server
	port:9080
	
In same file with dashes we can seperate each profile instead of seperate files 
Application.properties has more priority tham yaml file 
Even if both are present application will run without any ambiguity 


ADVANTAGES OF YAML Over properties files :
More clarity and readability
Perfect for hierarchical configuration data, which is also represented in a better , more readable format 
Support for maps , lists and scalar types 
